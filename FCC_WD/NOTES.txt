## ELEMENTS

Elements can have TWO formats:

- normal ‚áí <ELEMENT> CONTENT </ELEMENT>
    - **HAS** an *OPENING* ****and *CLOSING* tag
    - content can be textual content or elemental content
    - EXAMPLES:
        
        ```html
        <p>this is a paragraph</p> <!-- displays textual CONTENT using default styles -->
        <h1>HEADER ONE</h1> <!-- displays textual CONTENT -->
        <ul> <!-- displays elemental CONTENTs textual CONTENT -->
        	<li>item one</li>
        </ul>
        ```
        
- void ‚áí <ELEMENT />
    - **NO** *CLOSING* tag
    - self-contained elements
        - def self-contained
            - self-contained ‚áí has all that it needs in itself, complete
        - aka void elements don‚Äôt need the additional content between the start and closing tags because they have everything they need by itself in the attributes or predefined function
        - BUT they CAN still display content via attributes or predefined functions
    - EXAMPLES:
        
        ```html
        <br/> <!-- creates a new line in HTMl structure via predefined function -->
        <img src="cat.jpeg" alt="CAT SMILING"/> <!-- displays cat image via attributes -->
        <link rel="stylesheet" href="index.css"/> <!-- connects stylesheet -->
        <hr/> <!-- display horizontal line via predefined function -->
        ```
        

## HEADINGS

### Definition

Heading elements are sectioning elements each signify the importance of the content they are sectioning

- def signify
    - signify ‚áí be an indication of
        - indication ‚áí a sign or piece of information that indicates something
            - indicate ‚áí point out; show
                - heading elements are sectioning elements that show the importance of their content
- are normal elements
- block-level elements ‚áí start on new line
- NO element-specific attributes ‚áí ONLY global attributes
- are ordered from 1 to 6
    - the lower the number the higher the importance
    - elements with higher importance make broad sections
    - elements with lower importance make specific (or ‚Äúdetailed‚Äù) sections

```html
<!-- BROAD section -->
<h1>About Me</h1>
...
<!-- subsections -->
<h2>Projects</h2>
<!-- mildly detailed structure -->
	<h3>Programming</h3>
		<h6>Languages</h6> <!-- VERY detailed structure -->
			<p>Java</p>
			<p>C#</p>
	<h3>Photography</h3>
	<h3>Robotics</h3>
```

- element name ‚áí h + order number

```html

<h1>HEADER ONE</h1>
	<h2>HEADER TWO</h2>
		<h3>HEADER THREE</h3>
			<h4>HEADER FOUR</h4>
				<h5>HEADER FIVE</h5>
					<h6>HEADER SIX</h6>
<!-- since normal element it has opening and closing tag -->
```

- place lower importance headings below higher importance headings

```html
<!-- ‚ùå improper headings placement -->
<h2>hello world</h2>
<h1>Robot</h1>

<!-- ‚úÖ proper headings placement -->
<h1>Robot</h1>
	<h2>hello world</h2>
		<h3>scrolling</h3>
```

### DO NOT üö´üôÖ‚Äç‚ôÇÔ∏è

- DO NOT place MORE than ONE <h1> element on a page
- DO NOT use heading elements to RESIZE text
    - use css for that
- DO NOT SKIP heading LEVELS
    - **WHY**‚ùì
        - Users with screen readers usually navigate pages by quickly jumping from heading to heading and when there is a heading missing they may be left confused and dissatisfied with the website.
- DO NOT USE headings for NON-HEADING content

**RELATED**  üí°

You can use aria-labelledby to create sectioning content for assistive technologies

[<h1>‚Äì<h6>: The HTML Section Heading elements - HTML: HyperText Markup Language | MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements#labeling_section_content)
